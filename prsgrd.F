#include "cppdefs.h"
#ifdef SOLVE3D
 
      subroutine prsgrd (tile)
      implicit none
      integer tile
# include "param.h"
# include "private_scratch.h"
# include "compute_tile_bounds.h"
      call prsgrd32AC1_tile (istr,iend,jstr,jend, A3d(1,1),A3d(1,2),
     &                                                      A3d(1,3),
# ifdef SPLIT_EOS
     &                                                      A3d(1,4),
# endif
     &                        A2d(1,1), A2d(1,2),
     &                        A2d(1,1), A2d(1,2), A2d(1,3), A2d(1,4))
      return
      end
 
      subroutine prsgrd32AC1_tile (istr,iend,jstr,jend, ru,rv, P,
# ifdef SPLIT_EOS
     &                                                        rho,
# endif
     &                                       dR,dZ, FC,dZx,rx,dRx)
      implicit none
      integer istr,iend,jstr,jend, i,j,k, imin,imax,jmin,jmax
# include "param.h"
      real ru(PRIVATE_2D_SCRATCH_ARRAY,N),   OneFifth,
     &     rv(PRIVATE_2D_SCRATCH_ARRAY,N),   OneTwelfth,
     &      P(PRIVATE_2D_SCRATCH_ARRAY,N),   epsil,
# ifdef SPLIT_EOS
     &    rho(PRIVATE_2D_SCRATCH_ARRAY,N),   dpth,
# endif
 
     &     dR(PRIVATE_1D_SCRATCH_ARRAY,0:N), cff, GRho,
     &     dZ(PRIVATE_1D_SCRATCH_ARRAY,0:N), cfr, HalfGRho,
 
     &     FC(PRIVATE_2D_SCRATCH_ARRAY),
     &    dZx(PRIVATE_2D_SCRATCH_ARRAY),
     &     rx(PRIVATE_2D_SCRATCH_ARRAY),
     &    dRx(PRIVATE_2D_SCRATCH_ARRAY)
 
      parameter (OneFifth=0.2, OneTwelfth=1./12., epsil=0.)

# include "grid.h"
# include "ocean3d.h"
# include "eos_vars.h"
# include "scalars.h"
# include "mixing.h"
# ifdef DIAGNOSTICS_UV
#include "diags_uv.h"
# elif defined DIAGNOSTICS_VRT
#include "diags_vrt.h"
# endif
!
! A non-conservative Density-Jacobian scheme using cubic polynomial
! fits for rho and z_r as functions of nondimensianal coordinates xi,
! eta, and s (basically their respective fortran indices). The cubic
! polynomials are constructed by specifying first derivatives of
! interpolated fields on co-located (non-staggered) grid. These
! derivatives are computed using harmonic (rather that algebraic)
! averaging of elementary differences, which guarantees monotonicity
! of the resultant interpolant.
!
! In the code below, if CPP-switch SPLIT_EOS is defined, the Equation
! of State (EOS) is assumed to have form
!
!       rho(T,S,z) = rho1(T,S) + qp1(T,S)*dpth*[1.-qp2*dpth]
!
! where rho1 is potential density at 1 atm and qp1 is compressibility
! coefficient, which does not depend on z, and dpth=zeta-z, and qp2
! is just a constant. In this case
!
!   d rho    d rho1   d qp1                                    d z
!  ------- = ------ + ----- *dpth*[..] - qp1*[1.-2.*qp2*dpth]*------
!   d s,x     d s,x   d s,x                                    d s,x
!
!           |<--- adiabatic part --->|  |<--- compressible part --->|
!
! where the first two terms constitute "adiabatic derivative" of
! density, which is subject to harmonic averaging, while the last
! term is added in later. This approach quarantees that density
! profile reconstructed by cubic polynomial maintains its positive
! statification in physical sense as long as discrete values of
! density are positively stratified.
!
! This scheme retains exact antisymmetry J(rho,z_r)=-J(z_r,rho)
! [with the exception of harmonic averaging algorithm in the case
! when CPP-switch SPLIT_EOS is defined, see above]. If parameter
! OneFifth (see above) is set to zero, the scheme becomes identical
! to standard Jacobian.
!
! NOTE: This routine is an alternative form of prsgrd32 and it
!       produces results identical to that if its prototype.
!
# include "compute_auxiliary_bounds.h"
!
# ifndef EW_PERIODIC
      if (WESTERN_EDGE) then     ! Restrict extended ranges one
        imin=istrU               ! point inward near the physical
      else                       ! boundary. Note that this version
        imin=istrU-1             ! of code is suitable for MPI
      endif                      ! configuration too.
      if (EASTERN_EDGE) then
        imax=iend
      else
        imax=iend+1
      endif
# else
      imin=istr-1
      imax=iend+1
# endif
# ifndef NS_PERIODIC
        if (SOUTHERN_EDGE) then
          jmin=jstrV
        else
          jmin=jstrV-1
        endif
        if (NORTHERN_EDGE) then
          jmax=jend
        else
          jmax=jend+1
        endif
# else
        jmin=jstr-1
        jmax=jend+1
# endif
!
! Preliminary step (same for XI- and ETA-components:
!------------ ---- ----- --- --- --- ---------------
!
      GRho=g/rho0
      HalfGRho=0.5*GRho
 
      do j=jstrV-1,jend
        do k=1,N-1
          do i=istrU-1,iend
            dZ(i,k)=z_r(i,j,k+1)-z_r(i,j,k)
# ifdef SPLIT_EOS
            dpth=z_w(i,j,N)-0.5*(z_r(i,j,k+1)+z_r(i,j,k))

            dR(i,k)=rho1(i,j,k+1)-rho1(i,j,k)            ! Elementary
     &              +(qp1(i,j,k+1)-qp1(i,j,k))           ! adiabatic
     &                     *dpth*(1.-qp2*dpth)           ! difference
# else
            dR(i,k)=rho(i,j,k+1)-rho(i,j,k)
# endif
          enddo
        enddo
        do i=istrU-1,iend
          dR(i,N)=dR(i,N-1)
          dR(i,0)=dR(i,1)
          dZ(i,N)=dZ(i,N-1)
          dZ(i,0)=dZ(i,1)
        enddo
        do k=N,1,-1               !--> irreversible
          do i=istrU-1,iend
            cff=2.*dZ(i,k)*dZ(i,k-1)
            dZ(i,k)=cff/(dZ(i,k)+dZ(i,k-1))
 
            cfr=2.*dR(i,k)*dR(i,k-1)
            if (cfr.gt.epsil) then
              dR(i,k)=cfr/(dR(i,k)+dR(i,k-1))
            else
              dR(i,k)=0.
            endif
# ifdef SPLIT_EOS
            dpth=z_w(i,j,N)-z_r(i,j,k)
            dR(i,k)=dR(i,k)  -qp1(i,j,k)*dZ(i,k)*(1.-2.*qp2*dpth)
            rho(i,j,k)=rho1(i,j,k) +qp1(i,j,k)*dpth*(1.-qp2*dpth)
# endif
          enddo
        enddo
        do i=istrU-1,iend
          P(i,j,N)=g*z_w(i,j,N) + GRho*( rho(i,j,N)
     &       +0.5*(rho(i,j,N)-rho(i,j,N-1))*(z_w(i,j,N)-z_r(i,j,N))
     &          /(z_r(i,j,N)-z_r(i,j,N-1)) )*(z_w(i,j,N)-z_r(i,j,N))
        enddo
        do k=N-1,1,-1
          do i=istrU-1,iend
            P(i,j,k)=P(i,j,k+1)+HalfGRho*( (rho(i,j,k+1)+rho(i,j,k))
     &                                     *(z_r(i,j,k+1)-z_r(i,j,k))
 
     &     -OneFifth*( (dR(i,k+1)-dR(i,k))*( z_r(i,j,k+1)-z_r(i,j,k)
     &                              -OneTwelfth*(dZ(i,k+1)+dZ(i,k)) )
 
     &                -(dZ(i,k+1)-dZ(i,k))*( rho(i,j,k+1)-rho(i,j,k)
     &                              -OneTwelfth*(dR(i,k+1)+dR(i,k)) )
     &                                                             ))
          enddo
        enddo
      enddo   !<-- j
!
! Compute XI-component of pressure gradient term:
!-------- ------------ -- -------- -------- -----
!
      do k=N,1,-1
        do j=jstr,jend
          do i=imin,imax
            FC(i,j)=(z_r(i,j,k)-z_r(i-1,j,k))
# ifdef MASKING
     &                              *umask(i,j)
# endif
# ifdef SPLIT_EOS
            dpth=0.5*( z_w(i,j,N)+z_w(i-1,j,N)
     &                -z_r(i,j,k)-z_r(i-1,j,k))

            rx(i,j)=( rho1(i,j,k)-rho1(i-1,j,k)          ! Elementary
     &                +(qp1(i,j,k)-qp1(i-1,j,k))         ! adiabatic
     &                     *dpth*(1.-qp2*dpth) )         ! difference
# else
            rx(i,j)=(rho(i,j,k)-rho(i-1,j,k))
# endif
# ifdef MASKING
     &                              *umask(i,j)
# endif
#ifdef ADV_ISONEUTRAL
            cff=0.5*(pm(i,j)+pm(i-1,j))
            drdx(i,j,k) = cff*rx(i,j)
#endif
          enddo
        enddo
 
# ifndef EW_PERIODIC
        if (WESTERN_EDGE) then         ! Extrapolate elementary
          do j=jstr,jend               ! differences near physical
            FC(imin-1,j)=FC(imin,j)    ! boundaries to compencate.
            rx(imin-1,j)=rx(imin,j)    ! for reduced loop ranges.
#ifdef ADV_ISONEUTRAL
            drdx(imin-1,j,k)=drdx(imin,j,k)            
#endif
          enddo
        endif
        if (EASTERN_EDGE) then
          do j=jstr,jend
            FC(imax+1,j)=FC(imax,j)
            rx(imax+1,j)=rx(imax,j)
#ifdef ADV_ISONEUTRAL
            drdx(imax+1,j,k)=drdx(imax,j,k)            
#endif
          enddo
        endif
# endif
 
        do j=jstr,jend
          do i=istrU-1,iend
            cff=2.*FC(i,j)*FC(i+1,j)
            if (cff.gt.epsil) then
              dZx(i,j)=cff/(FC(i,j)+FC(i+1,j))
            else
              dZx(i,j)=0.
            endif
 
            cfr=2.*rx(i,j)*rx(i+1,j)
            if (cfr.gt.epsil) then
              dRx(i,j)=cfr/(rx(i,j)+rx(i+1,j))
            else
              dRx(i,j)=0.
            endif
# ifdef SPLIT_EOS
            dRx(i,j)=dRx(i,j) -qp1(i,j,k)*dZx(i,j)
     &         *(1.-2.*qp2*(z_w(i,j,N)-z_r(i,j,k)))
# endif
          enddo               !--> discard FC, rx

          do i=istrU,iend
            ru(i,j,k)=0.5*(Hz(i,j,k)+Hz(i-1,j,k))*dn_u(i,j)*(
     &                              P(i-1,j,k)-P(i,j,k)-HalfGRho*(

     &            (rho(i,j,k)+rho(i-1,j,k))*(z_r(i,j,k)-z_r(i-1,j,k))
 
     &   -OneFifth*( (dRx(i,j)-dRx(i-1,j))*( z_r(i,j,k)-z_r(i-1,j,k)
     &                            -OneTwelfth*(dZx(i,j)+dZx(i-1,j)) )
 
     &              -(dZx(i,j)-dZx(i-1,j))*( rho(i,j,k)-rho(i-1,j,k)
     &                            -OneTwelfth*(dRx(i,j)+dRx(i-1,j)) )
     &                                                            )))
# ifdef DIAGNOSTICS_UV
            if (nnew.ne.3) then
              MPrsgrd(i,j,k,1) = ru(i,j,k)
            endif
# elif defined DIAGNOSTICS_VRT
            if (nnew.ne.3) then
              if (k.eq.N) then
                wrkPrsgrd(i,j,1) = ru(i,j,k)
              else
                wrkPrsgrd(i,j,1) = wrkPrsgrd(i,j,1) + ru(i,j,k)
              endif
            endif
# endif
          enddo
        enddo
!
! ETA-component of pressure gradient term:
!-------------- -- -------- -------- -----
!
        do j=jmin,jmax
          do i=istr,iend
            FC(i,j)=(z_r(i,j,k)-z_r(i,j-1,k))
# ifdef MASKING
     &                              *vmask(i,j)
# endif          
# ifdef SPLIT_EOS
            dpth=0.5*( z_w(i,j,N)+z_w(i,j-1,N)
     &                -z_r(i,j,k)-z_r(i,j-1,k))
            
            rx(i,j)=( rho1(i,j,k)-rho1(i,j-1,k)          ! Elementary
     &                +(qp1(i,j,k)-qp1(i,j-1,k))         ! adiabatic
     &                     *dpth*(1.-qp2*dpth) )         ! difference
# else
            rx(i,j)=(rho(i,j,k)-rho(i,j-1,k))
# endif
# ifdef MASKING
     &                              *vmask(i,j)
# endif
#ifdef ADV_ISONEUTRAL
            cff=0.5*(pn(i,j)+pn(i,j-1)) 
            drde(i,j,k) = cff*rx(i,j)            
#endif
          enddo
        enddo
 
# ifndef NS_PERIODIC
        if (SOUTHERN_EDGE) then
          do i=istr,iend
            FC(i,jmin-1)=FC(i,jmin)
            rx(i,jmin-1)=rx(i,jmin)
#ifdef ADV_ISONEUTRAL
            drde(i,jmin-1,k)=drde(i,jmin,k)            
#endif
          enddo
        endif
        if (NORTHERN_EDGE) then
          do i=istr,iend
            FC(i,jmax+1)=FC(i,jmax)
            rx(i,jmax+1)=rx(i,jmax)
#ifdef ADV_ISONEUTRAL
            drde(i,jmax+1,k)=drde(i,jmax,k)              
#endif
          enddo
        endif
# endif
 
        do j=jstrV-1,jend
          do i=istr,iend
            cff=2.*FC(i,j)*FC(i,j+1)
            if (cff.gt.epsil) then
c**         if ((FC(i,j).gt.0. .and. FC(i,j+1).gt.0.) .or.
c**  &          (FC(i,j).lt.0. .and. FC(i,j+1).lt.0.)) then
              dZx(i,j)=cff/(FC(i,j)+FC(i,j+1))
            else
              dZx(i,j)=0.
            endif
 
            cfr=2.*rx(i,j)*rx(i,j+1)
            if (cfr.gt.epsil) then
c**         if ((rx(i,j).gt.0. .and. rx(i,j+1).gt.0.) .or.
c**  &          (rx(i,j).lt.0. .and. rx(i,j+1).lt.0.)) then
              dRx(i,j)=cfr/(rx(i,j)+rx(i,j+1))
            else
              dRx(i,j)=0.
            endif
# ifdef SPLIT_EOS
            dRx(i,j)=dRx(i,j) -qp1(i,j,k)*dZx(i,j)
     &         *(1.-2.*qp2*(z_w(i,j,N)-z_r(i,j,k)))
# endif
          enddo               !--> discard FC, rx
 
          if (j.ge.jstrV) then
            do i=istr,iend
              rv(i,j,k)=0.5*(Hz(i,j,k)+Hz(i,j-1,k))*dm_v(i,j)*(
     &                             P(i,j-1,k)-P(i,j,k) -HalfGRho*(

     &            (rho(i,j,k)+rho(i,j-1,k))*(z_r(i,j,k)-z_r(i,j-1,k))
 
     &   -OneFifth*( (dRx(i,j)-dRx(i,j-1))*( z_r(i,j,k)-z_r(i,j-1,k)
     &                            -OneTwelfth*(dZx(i,j)+dZx(i,j-1)) )
 
     &              -(dZx(i,j)-dZx(i,j-1))*( rho(i,j,k)-rho(i,j-1,k)
     &                            -OneTwelfth*(dRx(i,j)+dRx(i,j-1)) )
     &                                                            )))
#  ifdef DIAGNOSTICS_UV
            if (nnew.ne.3) then
              MPrsgrd(i,j,k,2) = rv(i,j,k)
            endif
# elif defined DIAGNOSTICS_VRT
            if (nnew.ne.3) then
              if (k.eq.N) then
                wrkPrsgrd(i,j,2) = rv(i,j,k)
              else
                wrkPrsgrd(i,j,2) = wrkPrsgrd(i,j,2) + rv(i,j,k)
              endif
            endif
#  endif
            enddo
          endif
        enddo
      enddo


c++      
c++ Apply boundary rotation for drdx and drde
c++ 
#ifdef ADV_ISONEUTRAL        
         do j=jstr,jend
           do i=istr,iend      
               cfr   = 0.5*( z_w (i,j,N)+z_w (i-1,j,N) )
               cff   = 0.5*( hbls(i,j,3-nstp)+hbls(i-1,j,3-nstp) ) 
               cff   = max(cff, 
     &              -0.5*(z_w(i,j,N-5)+z_w (i-1,j,N-5))  )  
               do k=2,N
                 dpth = (cfr-0.5*(z_w(i,j,k-1)+z_w(i-1,j,k-1)))
     &                / (cfr+cff)
                 if(dpth.le.1.) then
                 drdx(i,j,k) = drdx(i,j,k-1)*dpth*dpth*(3.-2.*dpth)                              
                 endif

c++                 dpth = ( z_r(i,j,k)+h(i,j)+z_r(i-1,j,k)+h(i-1,j) )
c++     &                / ( z_w(i,j,5)+h(i,j)+z_w(i-1,j,5)+h(i-1,j) )
c++                 if(dpth.le.1.) then
c++                 drdx(i,j,k) = drdx(i,j,k+1)*dpth*dpth*(3.-2.*dpth)                              
c++                 endif   
               enddo    
           enddo
         enddo

         do j=jstr,jend
           do i=istr,iend
               cfr   = 0.5*( z_w (i,j,N)+z_w (i,j-1,N) )
               cff   = 0.5*( hbls(i,j,3-nstp)+hbls(i,j-1,3-nstp) ) 
               cff   = max(cff, 
     &              -0.5*(z_w(i,j,N-5)+z_w (i,j-1,N-5))  )
               do k=2,N
                 dpth = (cfr-0.5*(z_w(i,j,k-1)+z_w(i,j-1,k-1)))
     &                / (cfr+cff)
                 if(dpth.le.1.) then
                 drde(i,j,k) = drde(i,j,k-1)*dpth*dpth*(3.-2.*dpth)                              
                 endif
                 
c++                 dpth = ( z_r(i,j,k)+h(i,j)+z_r(i,j-1,k)+h(i,j-1) )
c++     &                / ( z_w(i,j,5)+h(i,j)+z_w(i,j-1,5)+h(i,j-1) )
c++                 if(dpth.le.1.) then
c++                 drde(i,j,k) = drde(i,j,k+1)*dpth*dpth*(3.-2.*dpth)                              
c++                 endif                           
               enddo         
           enddo
        enddo
c++
        do k=1,N
# ifndef EW_PERIODIC
        if (WESTERN_EDGE) then        
          do j=jstr,jend               
            drdx(imin-1,j,k)=drdx(imin,j,k)            
          enddo
        endif
        if (EASTERN_EDGE) then
          do j=jstr,jend
            drdx(imax+1,j,k)=drdx(imax,j,k)            
          enddo
        endif
# endif        
# ifndef NS_PERIODIC
        if (SOUTHERN_EDGE) then
          do i=istr,iend
            drde(i,jmin-1,k)=drde(i,jmin,k)            
          enddo
        endif
        if (NORTHERN_EDGE) then
          do i=istr,iend
            drde(i,jmax+1,k)=drde(i,jmax,k)              
          enddo
        endif
# endif        
       enddo        
# endif /* ADV_ISONEUTRAL */
c++        
c++                         
      return
      end
#else
      subroutine prsgrd_empty
      end
#endif /* SOLVE3D */
 
